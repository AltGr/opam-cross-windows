--- a/reloc.ml   2016-03-12 10:07:55.273150073 +0000
+++ b/reloc.ml   2016-03-12 10:10:28.333982142 +0000
@@ -1048,16 +1048,75 @@
      List.hd (List.filter (fun s -> ends_with s "adainclude") str_l) in
    Filename.dirname (strip ada_include)
 
+
+let split str sep =
+  let p = String.index str sep in
+  let slen = String.length str in
+  String.sub str 0 p, String.sub str (p + 1) (slen - p - 1)
+
+let nsplit str sep =
+  if str = "" then []
+  else
+    let rec loop acc pos =
+      if pos > String.length str then
+        List.rev acc
+      else
+        let i = try String.index_from str pos sep with Not_found -> String.length str in
+        loop (String.sub str pos (i - pos) :: acc) (i + 1)
+    in
+    loop [] 0
+
+let normalize_path path =
+  let path = nsplit path Filename.dir_sep.[0] in
+  let rec loop acc path =
+    match path with
+    | "."  :: path -> loop acc path
+    | ".." :: path -> loop (List.tl acc) path
+    | elem :: path -> loop (elem :: acc) path
+    | [] -> List.rev acc
+  in
+  let path = loop [] path in
+  String.concat Filename.dir_sep path
+
+let remove_duplicate_paths paths =
+  let set = Hashtbl.create 16 in
+  let rec loop paths =
+    match paths with
+    | path :: paths ->
+      begin try
+        Hashtbl.find set path;
+        loop paths
+      with Not_found ->
+        Hashtbl.add set path ();
+        path :: loop paths
+      end
+    | [] -> []
+  in
+  loop paths
+
 let setup_toolchain () =
   let mingw_libs pre =
     gcc := pre ^ "gcc";
     objdump := pre ^ "objdump";
-    search_path :=
-      !dirs @
-      [
-       Filename.dirname (get_output1 (!gcc ^ " -print-libgcc-file-name"));
-       get_output1 (!gcc ^ " -print-sysroot") ^ "/mingw/lib";
-      ];
+    let rec get_lib_search_dirs input =
+      match input with
+      | entry :: input ->
+        begin try
+          match split entry '=' with
+          | "libraries: ", paths -> nsplit paths ':'
+          | _ -> get_lib_search_dirs input
+        with Not_found ->
+          get_lib_search_dirs input
+        end
+      | [] -> []
+    in
+    let lib_search_dirs =
+      get_lib_search_dirs (get_output (!gcc ^ " -print-search-dirs"))
+      |> List.map normalize_path
+      |> remove_duplicate_paths
+      |> List.filter (fun path -> Sys.file_exists path && Sys.is_directory path)
+    in
+    search_path := !dirs @ lib_search_dirs;
     default_libs :=
       ["-lmingw32"; "-lgcc"; "-lmoldname"; "-lmingwex"; "-lmsvcrt";
        "-luser32"; "-lkernel32"; "-ladvapi32"; "-lshell32" ];
